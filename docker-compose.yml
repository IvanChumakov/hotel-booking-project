version: '3'
name: hotel-booking-system

networks:
  hotel-booking-network:
    driver: bridge

volumes:
  redpanda: null
  postgres_data:
  prometheus:
  redis_data:
    driver: local

services:
  redpanda:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      - --mode dev-container
      - --smp 1
      - --default-log-level=info
    image: docker.redpanda.com/redpandadata/redpanda:v24.2.8
    container_name: redpanda
    volumes:
      - redpanda:/var/lib/redpanda/data
    networks:
      - hotel-booking-network
    ports:
      - "18081:18081"
      - "18082:18082"
      - "19092:19092"
      - "19644:9644"
      - "9092:9092"

  redpanda-console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v2.7.2
    networks:
      - hotel-booking-network
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
    ports:
      - "8000:8080"
    depends_on:
      - redpanda

  postgres:
    image: postgres:14.8-alpine3.18
    environment:
      POSTGRES_DB: "hotel-bookings"
      POSTGRES_USER: "username"
      POSTGRES_PASSWORD: "1234"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./initdb:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    networks:
      - hotel-booking-network
    ports:
      - "5432:5432"

  hotel-service:
    build:
      context: .
      dockerfile: ./hotelservice/Dockerfile
    volumes:
      - .:/code
    ports:
      - "8081:8081"
      - "50051:50051"
      - "5745:5745"
    networks:
      - hotel-booking-network
    depends_on:
      - postgres

  booking-service:
    build:
      context: .
      dockerfile: ./bookingservice/Dockerfile
    volumes:
      - .:/code
    ports:
      - "8080:8080"
      - "5746:5746"
    networks:
      - hotel-booking-network
    depends_on:
      - postgres
      - hotel-service
      - redpanda

  payment-service:
    build:
      context: .
      dockerfile: ./paymentservice/Dockerfile
    volumes:
      - .:/code
    ports:
      - "8082:8082"
    networks:
      - hotel-booking-network
    depends_on:
      - postgres
      - hotel-service
      - booking-service

  notification-service:
    build:
      context: .
      dockerfile: ./notificationservice/Dockerfile
    volumes:
      - .:/code
    networks:
      - hotel-booking-network
    ports:
      - "8083:8083"
    depends_on:
      - delivery-service
      - redpanda
  
  delivery-service:
     build:
      context: .
      dockerfile: ./deliveryservice/Dockerfile
     volumes:
      - .:/code
     networks:
      - hotel-booking-network
     ports:
      - "50052:50052"

  prometheus:
    image: prom/prometheus:v2.42.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/config.yml:/etc/prometheus/config.yml
      - ./prometheus/config.yml:/etc/prometheus/prometheus.yml
    networks:
      - hotel-booking-network

  jaeger:
      image: jaegertracing/all-in-one:1.39
      container_name: jaeger
      ports:
        - "5775:5775/udp"
        - "6831:6831/udp"
        - "6832:6832/udp"
        - "5778:5778"
        - "9411:9411"
        - "16686:16686"
        - "14268:14268"
      networks:
        - hotel-booking-network
  
  redis:
      image: docker.io/bitnami/redis:7.4
      environment:
        - ALLOW_EMPTY_PASSWORD=yes
        - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
      ports:
        - '6379:6379'
      volumes:
        - 'redis_data:/bitnami/redis/data'
      networks:
        - hotel-booking-network


